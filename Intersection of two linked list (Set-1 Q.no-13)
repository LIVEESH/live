#include <iostream>
#include <stdlib.h>
using namespace std;
struct Node
{
	int data;
	struct Node* next;
};
void printList(struct Node* head)
{
	struct Node* ptr = head;
	while (ptr)
	{
		cout<<("%d -> ", ptr->data);
		ptr = ptr->next;
	}

	cout<<("NULL\n");
}
void push(struct Node** head, int data)
{
	struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
	newNode->data = data;
	newNode->next = *head;
	*head = newNode;
}

struct Node* SortedIntersect(struct Node* a, struct Node* b)
{
	struct Node *head = NULL;
	struct Node* tail = NULL;
	while (a != NULL && b != NULL)
	{
		if (a->data == b->data)
		{
			if (head == NULL)
			{
				push(&head, a->data);
				tail=head;
			}
			else
			{
				push(&tail->next, a->data);
				tail=tail->next;
			}

			a = a->next;
			b = b->next;
		}
		else if (a->data < b->data)
			a = a->next;
		else
			b = b->next;
	}
	return head;
}

int main(void)
{
	int keys[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
	int n = sizeof(keys)/sizeof(keys[0]);
	struct Node *a = NULL;
	for (int i = n - 1; i >=0; i = i - 3)
		push(&a, keys[i]);
	struct Node *b = NULL;
	for (int i = n - 1; i >=0; i = i - 2)
		push(&b, keys[i]);
	cout<<("First List  :  ");
	printList(a);
	cout<<("Second List : ");
	printList(b);
	struct Node *head = SortedIntersect(a, b);

	printf("\nAfter Intersection - ");
	printList(head);

	return 0;
}

